package com.example.demo;

import java.util.*;

public class Course {

    public static void courseSplit(int C,int S,int K,int sectionSize){
        //两级分布的方案
        int tenPercent = C/10;
        if (C%10>=5){
            //四舍五入
            tenPercent +=1;
        }
        int size  = tenPercent * 9 + (C - tenPercent);
        int[] allCourse = new int[size];
        for (int i=0;i<size ;i++){
            allCourse[i] = i+1;
            System.out.println("allCourse["+i+"]="+ (i+1)+";");
            if (i<tenPercent){
                for (int j=0;j<8;j++){
                    allCourse[C+i+j*tenPercent] = i+1;
                    System.out.println("allCourse["+ (C+i+j*tenPercent) +"]="+ (i+1)+";");
                }
            }
        }
        int randomIndex;
        Random random=new Random();
        //Map<Integer,Set<Integer>> allStudent = new HashMap<>();
        //List<Set<Integer>> allStudent = new ArrayList<Set<Integer>>();

        List<int[]> conflict = new ArrayList<>();

        //所有学生选取的所有课程
       // int[] allChooseCourse = new int[S*K];
        Map<Integer,Integer> allChooseCourse = new HashMap<>();
        Map<Integer,Integer> needSplitCourse = new HashMap<>();

        for (int i=1;i<=S;i++){
            Set<Integer> studentCourse = new TreeSet<>();
            //给每个学生选K门课程
            for (int j=0;j<K;j++){
                randomIndex = random.nextInt(allCourse.length);
                if ( !studentCourse.add(allCourse[randomIndex])){
                    j--;
                }
            }
            Integer[] studentCourseArray = new Integer[K];
            studentCourse.toArray(studentCourseArray);
            System.out.println("第"+i+"个学生的选课："+Arrays.toString(studentCourseArray));
            //每个学生可能存在的所有的课程冲突
            for (int j = 0; j < K ; j++) {
                //统计出每门课被选的次数
                if (allChooseCourse.containsKey(studentCourseArray[j])){
                    allChooseCourse.put(studentCourseArray[j],allChooseCourse.get(studentCourseArray[j]).intValue()+1);
                }else {
                    allChooseCourse.put(studentCourseArray[j], 1);
                }

               // allChooseCourse[(i-1)*K+j] = studentCourseArray[j];
                for (int l = j+1; l <K ; l++) {
                    int[] singleConflict = {studentCourseArray[j],studentCourseArray[l]};
                    conflict.add(singleConflict);
                    //System.out.println(Arrays.toString(singleConflict));
                }

            }
        }
        //区分需要分section的课和不需要分的课
        Iterator<Map.Entry<Integer, Integer>> entries = allChooseCourse.entrySet().iterator();
        while(entries.hasNext()){
            Map.Entry<Integer, Integer> entry = entries.next();
            if (entry.getValue()>sectionSize){
                needSplitCourse.put(entry.getKey(),entry.getValue());
                entries.remove();
            }
        }
        System.out.println("needSplitCourse.size="+needSplitCourse.size()+",needSplitCourse:"+needSplitCourse.toString());
        System.out.println("allChooseCourse.size="+allChooseCourse.size()+",allChooseCourse:"+allChooseCourse.toString());

        Set<String> noDuplicateCourseConflict = new HashSet<>();
        Iterator<int[]> noSectionCourseConflictIterator = conflict.iterator();
        int[] sigConflict;
        String sigC;
        while (noSectionCourseConflictIterator.hasNext()){
            sigConflict = noSectionCourseConflictIterator.next();
            sigC = Arrays.toString(noSectionCourseConflictIterator.next());
            //if (!needSplitCourse.containsKey(sigConflict[0]) && !needSplitCourse.containsKey(sigConflict[1])){

                noDuplicateCourseConflict.add(sigC);
                System.out.println(sigC);
           // }
        }
        System.out.println("conflict.size="+conflict.size());
        System.out.println("noDuplicateCourseConflict.size="+noDuplicateCourseConflict.size());
       // Arrays.sort(allChooseCourse);
       // System.out.println("allChooseCourse.size="+allChooseCourse.length+";is"+Arrays.toString(allChooseCourse));
        //输出S个学生分别从两级分布的C门课程中选出的K门课程
        //System.out.println(allStudent.toString());

    }


    public static void main(String[] args){

        courseSplit(50,100,20,30);
    }
}
